1. 设计并实现一个简易的缓存框架，要求支持并发的读写和LRU缓存淘汰算法，并考虑性能

public class LRUCache {

  private final int capacity;
  LinkedHashMap<Integer, Integer> cache;

  public LRUCache(int capacity) {
    cache = new LinkedHashMap<Integer, Integer>(capacity, 0.75F, true) {
      @Override
      protected boolean removeEldestEntry(Map.Entry<Integer, Integer> eldest) {
        return size() > capacity;
      }
    };
    this.capacity = capacity;
  }

  public int get(int key) {
    Integer value = cache.get(key);
    return value == null ? -1 : value;
  }

  public void put(int key, int value) {
    cache.put(key, value);
  }
}


2. 编写一个程序，开启3个线程，
这3个线程的ID分别为A、B、C，3个线程交替打印1-100的整数，要求输出结果有序,
  样例Sample:
Thread1: 1
Thread2: 2
Thread3: 3
Thread1: 4
Thread2: 5
Thread3: 6
....
Thread3: 99
Thread1: 100


public class ThreadPrintMain {

  public static void main(String[] args) throws InterruptedException {
    ThreadPrintMain threadPrint = new ThreadPrintMain(3, 100);
    threadPrint.runThread();
  }

  private volatile int i = 0;
  private Thread[] threads;
  private volatile int flag = 0;
  final int threadNum;
  private final int sum;

  public ThreadPrintMain(int threadNum, int sum) {
    this.threadNum = threadNum;
    this.sum = sum;
  }

  public void runThread() throws InterruptedException {
    threads = new Thread[threadNum];
    for (int j = 0; j < threadNum; j++) {
      threads[j] = new Thread(new PrintThread(j));
      threads[j].setName("thread" + (j + 1));
    }
    for (Thread thread : threads) {
      thread.start();
    }
  }

  public class PrintThread implements Runnable {

    int num = 0;

    public PrintThread(int num) {
      this.num = num;
    }

    public void run() {
      while (i < sum) {
        if (flag == num) {
          System.out.println(Thread.currentThread().getName() + ":" + (++i));
          flag = (num + 1) == threadNum ? 0 : num + 1;
        }
      }
    }

  }

}




3. 遍历一个二叉树，打印出该路径中每个节点数字的和与给定目标值一致的有效路径。
有效路径：从根节点到叶节点的路径。
给定一个二叉树 :
       1
    / \
   2   4
  / \
 2   3
目标值= 5时返回结果：
1 2 2
1 4


public class TreeSum {

  public static void main(String[] args) {
    TreeSum sum = new TreeSum();
    List<List<Integer>> lists = sum.pathSum(new TreeNode(1
        , new TreeNode(2, new TreeNode(2), new TreeNode(3)), new TreeNode(4)), 5);

    for (List<Integer> list : lists) {
      System.out.println(list);
    }
  }

  public List<List<Integer>> pathSum(TreeNode root, int sum) {
    if (root == null) {
      return Collections.emptyList();
    }

    List<List<Integer>> result = new ArrayList<>();
    dfs(result, root, new ArrayList<>(), 0, sum);
    return result;
  }

  private void dfs(List<List<Integer>> result, TreeNode root, List<Integer> res, int pathSum,
      int sum) {
    if (pathSum == sum && root == null) {
      result.add(res);
      return;
    }
    if (root == null) {
      return;
    }

    ArrayList<Integer> nextLevel = new ArrayList<>(res);
    nextLevel.add(root.val);

    if (root.left == null && root.right == null) {
      dfs(result, root.left, nextLevel, pathSum + root.val, sum);
    } else {
      dfs(result, root.left, nextLevel, pathSum + root.val, sum);
      dfs(result, root.right, nextLevel, pathSum + root.val, sum);
    }
  }
}



4. 使用两个栈来实现队列的一些操作。
队列应支持push(element)，pop() 和 top()，其中pop是弹出队列中的第一个(最前面的)元素。
pop和top方法都应该返回第一个元素的值。
样例：比如push(1), pop(), push(2), push(3), top(), pop()，你应该返回1，2和2
要求：仅使用两个栈来实现它，不使用任何其他数据结构，push，pop 和 top的复杂度都应该是均摊O(1)的


public class Queue {

  public static void main(String[] args) {
    Queue queue = new Queue();
    queue.push(1);
    System.out.println(queue.pop());
    queue.push(2);
    queue.push(3);
    System.out.println(queue.top());
    System.out.println(queue.pop());
    System.out.println(queue.top());
  }

  Stack<Integer> stack1 = new Stack<>();
  Stack<Integer> stack2 = new Stack<>();

  public void push(int num) {
    stack1.push(num);
  }

  public int top() {
    Integer re = null;
    if (!stack2.empty()) {
      re = stack2.pop();
    } else {
      while (!stack1.empty()) {
        re = stack1.pop();
        stack2.push(re);
      }
      if (!stack2.empty()) {
        re = stack2.peek();
      }
    }
    return re;
  }

  //出栈函数
  public int pop() {
    Integer re = null;
    if (!stack2.empty()) {
      re = stack2.pop();
    } else {
      while (!stack1.empty()) {
        re = stack1.pop();
        stack2.push(re);
      }
      if (!stack2.empty()) {
        re = stack2.pop();
      }
    }
    return re;
  }
}



5. 比较一个源字符串和一个目标字符串，
如果在源字符串中包含目标字符串全部字符，输出所包含的第一个最小子串；
如果不存在，输出空。
：样例
source = "BPDAUNZHGAHSIWBADNC"，target = "BDN" 满足要求的解  "BADN"
要求：时间复杂度为O(n^2)

  
